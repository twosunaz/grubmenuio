{"version":3,"file":"index-DSGO3t9d.js","sources":["../../src/components/app/sql-editor/index.vue"],"sourcesContent":["<script setup>\nimport { ref, onMounted, computed } from \"vue\";\nimport { useRoute, useRouter } from \"vue-router\";\n// Store\nimport { useAppStore } from \"@/store/app/app.js\";\nconst appStore = useAppStore();\nconst route = useRoute();\n// Functions\nimport { lmnFetch } from \"@/assets/js/functions/lmnFetch.js\";\nimport { notify } from \"@/assets/js/functions/notify.js\";\nimport { handleTokenExpiration } from \"@/assets/js/functions/handleTokenExpiration.js\";\nimport CodeEditor from \"@/components/app/code-editor/index.vue\";\nimport AppIcon from \"@/components/utility/icons/index.vue\";\nimport Confirm from \"@/components/utility/confirm/index.vue\";\nimport AppButton from \"@/components/utility/app-button/index.vue\";\nimport AppInput from \"@/components/utility/text-input/index.vue\";\n\n// States\nconst activated = ref(false);\nconst confirm = ref(null);\nconst router = useRouter();\nconst userSQL = ref(\"SELECT * FROM wp_posts LIMIT 10;\");\nconst isExecuting = ref(false);\nconst queryResults = ref(null);\nconst resultsTab = ref(\"results\"); // 'results' or 'chart'\nconst databaseTables = ref([]);\nconst searchQuery = ref(\"\");\nconst favoriteQueries = ref([]);\nconst sharedQueries = ref([]);\nconst privateQueries = ref([{ id: 1, name: \"Untitled query\", content: \"SELECT * FROM wp_posts LIMIT 10;\" }]);\nconst selectedQuery = ref(null);\nconst isQuerySaved = ref(false);\n\n// Template categories\nconst templates = ref([\n  {\n    id: \"post_count\",\n    name: \"Post Count by Status\",\n    content: \"SELECT post_status, COUNT(*) as count FROM wp_posts GROUP BY post_status ORDER BY count DESC;\",\n  },\n  {\n    id: \"recent_users\",\n    name: \"Recent User Registrations\",\n    content: \"SELECT ID, user_login, user_email, user_registered FROM wp_users ORDER BY user_registered DESC LIMIT 20;\",\n  },\n  {\n    id: \"comment_stats\",\n    name: \"Comment Statistics\",\n    content: \"SELECT comment_approved, COUNT(*) as count FROM wp_comments GROUP BY comment_approved;\",\n  },\n]);\n\n// Quickstart queries\nconst quickstarts = ref([\n  {\n    id: \"user_info\",\n    name: \"User Information\",\n    content: \"SELECT ID, user_login, user_email, user_registered FROM wp_users LIMIT 10;\",\n  },\n  {\n    id: \"post_meta\",\n    name: \"Popular Post Meta\",\n    content: \"SELECT meta_key, COUNT(*) as count FROM wp_postmeta GROUP BY meta_key ORDER BY count DESC LIMIT 20;\",\n  },\n]);\n\n// Activation and API calls\nconst getActivationState = async () => {\n  appStore.updateState(\"loading\", true);\n  const args = {\n    endpoint: `snipvault/v1/sql/status`,\n  };\n  const response = await lmnFetch(args);\n  appStore.updateState(\"loading\", false);\n  if (!response) return;\n  if (response.data.active) {\n    activated.value = true;\n    handleTokenExpiration(response.data.expires, showTokenExpiryModal, (secondsRemaining) => {});\n    loadDatabaseTables();\n    return;\n  }\n  // Confirm user intent\n  const userResponse = await confirm.value.show({\n    title: __(\"Enable SQL Editor?\", \"snipvault\"),\n    message: __(\"For security reasons, SQL editor access requires temporary activation. Once activated, it will remain available for one hour and then automatically deactivate.\", \"snipvault\"),\n    okButton: __(\"Activate for 1 Hour\", \"snipvault\"),\n  });\n  // Bailed by user\n  if (!userResponse) {\n    router.push(`/`);\n    return;\n  }\n  activateSqlEditor();\n};\n\nconst activateSqlEditor = async () => {\n  appStore.updateState(\"loading\", true);\n  const args = {\n    endpoint: `snipvault/v1/sql/enable`,\n    type: \"POST\",\n  };\n  const response = await lmnFetch(args);\n  appStore.updateState(\"loading\", false);\n  if (!response) return;\n  if (response.data.success) {\n    activated.value = true;\n    notify({\n      title: __(\"SQL Editor enabled\", \"snipvault\"),\n      type: \"success\",\n    });\n    handleTokenExpiration(response.data.expires, showTokenExpiryModal, (secondsRemaining) => {});\n    loadDatabaseTables();\n    return;\n  }\n};\n\nconst showTokenExpiryModal = async () => {\n  // Confirm user intent\n  const userResponse = await confirm.value.show({\n    title: __(\"SQL Editor access has expired\", \"snipvault\"),\n    message: __(\"For security reasons, access to the SQL Editor has now expired. Would you like to extend access for one hour?\", \"snipvault\"),\n    okButton: __(\"Activate for 1 Hour\", \"snipvault\"),\n  });\n  if (userResponse) {\n    activateSqlEditor();\n  }\n};\n\nconst loadDatabaseTables = async () => {\n  appStore.updateState(\"loading\", true);\n  const args = {\n    endpoint: `snipvault/v1/sql/tables`,\n  };\n  const response = await lmnFetch(args);\n  appStore.updateState(\"loading\", false);\n  if (!response || !response.data.success) return;\n\n  databaseTables.value = response.data.tables;\n};\n\nconst executeQuery = async () => {\n  if (!userSQL.value || isExecuting.value) return;\n\n  const dangerous = checkDangerousQuery(userSQL.value);\n\n  let force_confirm = false;\n  if (dangerous) {\n    // Confirm user intent\n    const userResponse = await confirm.value.show({\n      title: __(\"Hold up!\", \"snipvault\"),\n      message: __(\n        \"This query contains operations that could modify or delete database content. \" +\n          \"Please ensure you:<br><br>\" +\n          \"• Have a recent database backup<br>\" +\n          \"• Understand the exact changes this query will make<br>\" +\n          \"• Are running this in the correct environment<br><br>\" +\n          \"Do you want to proceed with execution?\",\n        \"snipvault\"\n      ),\n      okButton: __(\"Run\", \"snipvault\"),\n    });\n    if (!userResponse) {\n      return;\n    } else {\n      force_confirm = true;\n    }\n  }\n\n  isExecuting.value = true;\n  appStore.updateState(\"loading\", true);\n\n  const args = {\n    endpoint: `snipvault/v1/sql/query`,\n    type: \"POST\",\n    data: {\n      query: userSQL.value,\n      force_confirm,\n      skip_security_check: force_confirm,\n    },\n  };\n\n  const response = await lmnFetch(args);\n\n  isExecuting.value = false;\n  appStore.updateState(\"loading\", false);\n\n  if (!response) {\n    queryResults.value = { error: __(\"Query execution failed\", \"snipvault\") };\n  }\n\n  if (response && response.data) {\n    queryResults.value = response.data;\n    resultsTab.value = \"results\";\n    notify({\n      title: __(\"Query executed successfully\", \"snipvault\"),\n      type: \"success\",\n    });\n  }\n};\n\n/**\n * Checks if an SQL query contains potentially dangerous operations\n * @param {string} query - The SQL query to check\n * @returns {Object} - Result with status and message if dangerous\n */\nconst checkDangerousQuery = (query) => {\n  // Normalize query by trimming and ensuring consistent spacing\n  const normalizedQuery = query.trim().replace(/\\s+/g, \" \");\n\n  // Extract the first word to determine query type\n  const firstWord = normalizedQuery.split(\" \")[0].toUpperCase();\n\n  // Determine if this is a read-only or write operation\n  const readOnlyOperations = [\"SELECT\", \"SHOW\", \"DESCRIBE\", \"DESC\", \"EXPLAIN\"];\n  const isReadOnly = readOnlyOperations.includes(firstWord);\n\n  // Dangerous operations that should be flagged with stronger warnings\n  const dangerousPatterns = [\n    /\\bDROP\\b/i,\n    /\\bALTER\\b/i,\n    /\\bCREATE\\b/i,\n    /\\bTRUNCATE\\b/i,\n    /\\bGRANT\\b/i,\n    /\\bREVOKE\\b/i,\n    /\\bDELETE\\b\\s+(?!FROM)/i, // Allow DELETE FROM but not just DELETE\n    /;.+/s, // Prevent multiple queries\n  ];\n\n  // Check for multiple statements in any query type\n  if (/;.+/s.test(normalizedQuery)) {\n    return true;\n  }\n\n  // For DELETE statements, ensure they have FROM\n  if (firstWord === \"DELETE\" && !/\\bDELETE\\s+FROM\\b/i.test(normalizedQuery)) {\n    return true;\n  }\n\n  // Check for highly dangerous operations\n  for (const pattern of dangerousPatterns) {\n    if (pattern.test(normalizedQuery)) {\n      // Find which type of dangerous operation was detected\n      let operationType = \"dangerous operation\";\n      if (/\\bDROP\\b/i.test(normalizedQuery)) operationType = \"DROP\";\n      else if (/\\bALTER\\b/i.test(normalizedQuery)) operationType = \"ALTER\";\n      else if (/\\bCREATE\\b/i.test(normalizedQuery)) operationType = \"CREATE\";\n      else if (/\\bTRUNCATE\\b/i.test(normalizedQuery)) operationType = \"TRUNCATE\";\n      else if (/\\bGRANT\\b/i.test(normalizedQuery)) operationType = \"GRANT\";\n      else if (/\\bREVOKE\\b/i.test(normalizedQuery)) operationType = \"REVOKE\";\n\n      return true;\n    }\n  }\n\n  // For write operations (not dangerous but still modifies data)\n  if (!isReadOnly) {\n    let operationType = firstWord;\n\n    return true;\n  }\n\n  // Safe read-only query\n  return false;\n};\n\nconst insertTableName = (tableName) => {\n  userSQL.value += ` ${tableName}`;\n};\n\nconst loadTemplateQuery = (template) => {\n  userSQL.value = template.content;\n};\n\nconst loadSavedQuery = (query) => {\n  userSQL.value = query.content;\n  selectedQuery.value = query.id;\n  isQuerySaved.value = true;\n};\n\n// Save queries to localStorage\nconst saveQueriesToLocalStorage = () => {\n  localStorage.setItem(\"snipvault_sql_queries\", JSON.stringify(privateQueries.value));\n};\n\n// Load queries from localStorage\nconst loadQueriesFromLocalStorage = () => {\n  const savedQueries = localStorage.getItem(\"snipvault_sql_queries\");\n  if (savedQueries) {\n    privateQueries.value = JSON.parse(savedQueries);\n  }\n};\n\n// Update the saveCurrentQuery function\nconst saveCurrentQuery = () => {\n  if (selectedQuery.value) {\n    // Update existing query\n    const queryIndex = privateQueries.value.findIndex((q) => q.id === selectedQuery.value);\n    if (queryIndex >= 0) {\n      privateQueries.value[queryIndex].content = userSQL.value;\n      notify({\n        title: __(\"Query updated\", \"snipvault\"),\n        type: \"success\",\n      });\n    }\n  } else {\n    // Create new query\n    const newId = Math.max(0, ...privateQueries.value.map((q) => q.id)) + 1;\n    privateQueries.value.push({\n      id: newId,\n      name: \"Untitled query \" + newId,\n      content: userSQL.value,\n    });\n    selectedQuery.value = newId;\n    notify({\n      title: __(\"Query saved\", \"snipvault\"),\n      type: \"success\",\n    });\n  }\n  isQuerySaved.value = true;\n\n  // Save to localStorage after updating\n  saveQueriesToLocalStorage();\n};\n\n// Add a function to delete queries\nconst deleteQuery = async (queryId) => {\n  const userResponse = await confirm.value.show({\n    title: __(\"Delete Query?\", \"snipvault\"),\n    message: __(\"Are you sure you want to delete this query? This action cannot be undone.\", \"snipvault\"),\n    okButton: __(\"Delete\", \"snipvault\"),\n  });\n\n  if (!userResponse) return;\n\n  const queryIndex = privateQueries.value.findIndex((q) => q.id === queryId);\n  if (queryIndex >= 0) {\n    privateQueries.value.splice(queryIndex, 1);\n\n    if (selectedQuery.value === queryId) {\n      selectedQuery.value = null;\n      isQuerySaved.value = false;\n    }\n\n    saveQueriesToLocalStorage();\n\n    notify({\n      title: __(\"Query deleted\", \"snipvault\"),\n      type: \"success\",\n    });\n  }\n};\n\nconst createNewQuery = () => {\n  userSQL.value = \"-- Write your SQL query here\\n\";\n  selectedQuery.value = null;\n  isQuerySaved.value = false;\n};\n\n// Format SQL function\nconst formatSQL = () => {\n  // Simple SQL formatter\n  // In a production environment, you might want to use a proper SQL formatter library\n  const formatted = userSQL.value\n    .replace(/(\\bSELECT\\b)/gi, \"\\n$1\")\n    .replace(/(\\bFROM\\b)/gi, \"\\n$1\")\n    .replace(/(\\bWHERE\\b)/gi, \"\\n$1\")\n    .replace(/(\\bGROUP BY\\b)/gi, \"\\n$1\")\n    .replace(/(\\bORDER BY\\b)/gi, \"\\n$1\")\n    .replace(/(\\bLIMIT\\b)/gi, \"\\n$1\")\n    .replace(/(\\bJOIN\\b)/gi, \"\\n$1\")\n    .replace(/(\\bAND\\b)/gi, \"\\n  $1\")\n    .replace(/(\\bOR\\b)/gi, \"\\n  $1\");\n\n  userSQL.value = formatted;\n};\n\nconst updateSavedTitle = async (evt, savedQuery) => {\n  const newValue = evt.target.innerHTML.trim();\n  const queryIndex = privateQueries.value.findIndex((q) => q.id === savedQuery.id);\n\n  if (!newValue) return;\n\n  if (newValue == privateQueries.value[queryIndex].name) return;\n\n  if (queryIndex >= 0) {\n    privateQueries.value[queryIndex].name = newValue;\n    saveQueriesToLocalStorage();\n    notify({\n      title: __(\"Query renamed\", \"snipvault\"),\n      type: \"success\",\n    });\n  }\n};\n\n// Filtered tables based on search\nconst filteredTables = computed(() => {\n  if (!searchQuery.value) return databaseTables.value;\n  return databaseTables.value.filter((table) => table.name.toLowerCase().includes(searchQuery.value.toLowerCase()));\n});\n\nonMounted(() => {\n  getActivationState();\n  loadQueriesFromLocalStorage(); // Load saved queries from localStorage\n});\n</script>\n\n<template>\n  <div class=\"flex h-full w-full overflow-hidden\">\n    <!-- Sidebar -->\n    <div class=\"w-[300px] border-r border-zinc-200 dark:border-zinc-700 h-full max-h-full shrink-0 flex flex-col\">\n      <div class=\"px-4 py-3 border-b border-zinc-200 dark:border-zinc-700 flex items-center justify-between\">\n        <h2 class=\"text-lg font-medium\">SQL Editor</h2>\n      </div>\n\n      <!-- Search bar -->\n      <div class=\"relative w-full border-b border-zinc-200 dark:border-zinc-700 flex flex-row pr-4 items-center gap-1\">\n        <AppIcon icon=\"search\" class=\"absolute left-5 top-1/2 -translate-y-1/2 text-zinc-500\" />\n        <input type=\"text\" v-model=\"searchQuery\" :placeholder=\"__('Search queries...', 'snipvault')\" class=\"px-6 py-4 pl-12 w-full bg-white dark:bg-zinc-900 focus:outline-0 grow\" />\n      </div>\n\n      <!-- Categories -->\n      <div class=\"overflow-y-auto flex-grow p-2\">\n        <!-- Templates -->\n        <div class=\"py-2 px-4\">\n          <div class=\"text-sm font-medium text-zinc-400 mb-2\">{{ __(\"Templates\", \"snipvault\") }}</div>\n          <div v-for=\"template in templates\" :key=\"template.id\" class=\"text-sm py-1 px-2 hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded cursor-pointer\" @click=\"loadTemplateQuery(template)\">\n            {{ template.name }}\n          </div>\n        </div>\n\n        <!-- Quickstarts -->\n        <div class=\"py-2 px-4\">\n          <div class=\"text-sm font-medium text-zinc-400 mb-2\">{{ __(\"Quickstarts\", \"snipvault\") }}</div>\n          <div v-for=\"query in quickstarts\" :key=\"query.id\" class=\"text-sm py-1 px-2 hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded cursor-pointer\" @click=\"loadTemplateQuery(query)\">\n            {{ query.name }}\n          </div>\n        </div>\n\n        <!-- Private -->\n        <div class=\"py-2 px-4\">\n          <div class=\"flex items-center text-sm font-medium text-zinc-400 mb-2\">\n            <span>{{ __(\"Saved\", \"snipvault\") }} ({{ privateQueries.length }})</span>\n          </div>\n          <div\n            v-for=\"query in privateQueries\"\n            :key=\"query.id\"\n            :class=\"[\n              'text-sm py-1 px-2 hover:bg-zinc-100 dark:hover:bg-zinc-800 rounded cursor-pointer flex items-center relative group',\n              selectedQuery === query.id ? 'bg-zinc-200 dark:bg-zinc-800' : '',\n            ]\"\n            @click=\"loadSavedQuery(query)\"\n          >\n            <div class=\"truncate text-sm\" :contenteditable=\"true\" v-html=\"query.name\" @blur=\"updateSavedTitle($event, query)\" @keydown.prevent.enter=\"$event.target.blur()\" @click.stop></div>\n\n            <div class=\"absolute right-0 h-full flex flex-col justify-center opacity-0 transition-opacity group-hover:opacity-100\">\n              <AppButton @click.stop.prevent=\"deleteQuery(query.id)\" type=\"transparent\"><AppIcon icon=\"delete\"></AppIcon></AppButton>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Editor and Results Area -->\n    <div class=\"grow flex flex-col overflow-hidden w-full h-full\">\n      <!-- SQL Editor Section -->\n      <div class=\"h-[50%] border-b border-zinc-200 dark:border-zinc-700 flex flex-col\">\n        <CodeEditor v-model=\"userSQL\" language=\"sql\" class=\"flex-grow\" theme=\"vs-dark\" />\n\n        <!-- Editor Controls -->\n        <div class=\"px-4 py-2 border-t border-zinc-200 dark:border-zinc-700 flex justify-between items-center\">\n          <div class=\"flex items-center space-x-2\">\n            <AppButton @click=\"formatSQL\" type=\"default\">{{ __(\"Format\", \"snipvault\") }}</AppButton>\n            <AppButton @click=\"saveCurrentQuery\" type=\"default\">\n              {{ isQuerySaved ? __(\"Update\", \"snipvault\") : __(\"Save\", \"snipvault\") }}\n            </AppButton>\n          </div>\n\n          <button\n            @click=\"executeQuery\"\n            :disabled=\"isExecuting\"\n            :loading=\"isExecuting\"\n            class=\"transition-all rounded-lg w-auto cursor-pointer relative group whitespace-nowrap bg-green-700 px-3 py-1 text-zinc-200 hover:text-zinc-50 hover:bg-green-900 transition-all border border-green-600 disabled:text-zinc-600 outline outline-1 outline-offset-[-2px] outline-zinc-100/10 dark:outline-0 dark:border-zinc-700 dark:hover:bg-green-800 flex flex-row items-center gap-2\"\n          >\n            <AppIcon icon=\"play_arrow\" />\n            <span>{{ __(\"Run\", \"snipvault\") }}</span>\n          </button>\n        </div>\n      </div>\n\n      <!-- Results Section -->\n      <div class=\"h-[50%] overflow-auto flex flex-col\">\n        <!-- Results Content -->\n        <div class=\"flex-grow overflow-auto p-4\" v-if=\"resultsTab === 'results'\">\n          <div v-if=\"!queryResults\">\n            <div class=\"col-span-3 rounded-lg bg-rose-500/10 border border-rose-600/60 p-4 text-sm mt-6\">\n              <p class=\"mb-3\">{{ __(\"Direct SQL execution is powerful but potentially dangerous. Always backup your database before making changes.\", \"snipvault\") }}</p>\n\n              <p>\n                {{ __(\"If unsure about SQL or its effects, consult documentation or a database expert first.\", \"snipvault\") }}\n              </p>\n            </div>\n\n            <div class=\"text-zinc-500 dark:text-zinc-400 text-center py-10\">{{ __(\"Click Run to execute your query.\", \"snipvault\") }}</div>\n          </div>\n\n          <div v-else-if=\"queryResults.error\" class=\"text-red-500 p-4 bg-red-500 bg-opacity-10 rounded\">\n            <div class=\"font-bold\">Error:</div>\n            <div>{{ queryResults.error }}</div>\n          </div>\n\n          <div v-else-if=\"queryResults.type === 'select'\" class=\"overflow-x-auto\">\n            <!-- SELECT query results -->\n            <table class=\"w-full text-sm border-collapse\">\n              <thead>\n                <tr class=\"bg-zinc-100 dark:bg-zinc-800\">\n                  <th v-for=\"column in queryResults.columns\" :key=\"column\" class=\"px-4 py-2 text-left border border-zinc-200 dark:border-zinc-700\">\n                    {{ column }}\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr v-for=\"(row, rowIndex) in queryResults.rows\" :key=\"rowIndex\" class=\"hover:bg-zinc-100 dark:hover:bg-zinc-800\">\n                  <td v-for=\"column in queryResults.columns\" :key=\"column\" class=\"px-4 py-2 border border-zinc-200 dark:border-zinc-700\">\n                    {{ row[column] }}\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <div class=\"mt-2 text-sm text-zinc-400\">{{ queryResults.rowCount }} {{ __(\"rows returned\", \"snipvault\") }}</div>\n          </div>\n\n          <div v-else class=\"p-4 bg-zinc-100 dark:bg-zinc-800 rounded\">\n            <!-- Non-SELECT query results -->\n            <div class=\"text-green-600 dark:text-green-400 mb-2 flex flex-row items-center gap-3\">\n              <AppIcon icon=\"tick\" class=\"text-xl\" />\n              <span>{{ __(\"Query executed successfully\", \"snipvault\") }}</span>\n            </div>\n            <div class=\"text-zinc-500 dark:text-zinc-400\">\n              {{ queryResults.message }}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"flex-grow overflow-auto p-4\" v-if=\"resultsTab === 'chart'\">\n          <div class=\"text-zinc-400 text-center py-10\">\n            Chart visualization will be available here.\n            <div class=\"mt-2 text-sm\">(Only works with numerical data from SELECT queries)</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <Confirm ref=\"confirm\" />\n  </div>\n</template>\n"],"names":["appStore","useAppStore","useRoute","activated","ref","confirm","router","useRouter","userSQL","isExecuting","queryResults","resultsTab","databaseTables","searchQuery","privateQueries","selectedQuery","isQuerySaved","templates","quickstarts","getActivationState","response","lmnFetch","handleTokenExpiration","showTokenExpiryModal","secondsRemaining","loadDatabaseTables","activateSqlEditor","notify","executeQuery","dangerous","checkDangerousQuery","force_confirm","args","query","normalizedQuery","firstWord","isReadOnly","dangerousPatterns","pattern","loadTemplateQuery","template","loadSavedQuery","saveQueriesToLocalStorage","loadQueriesFromLocalStorage","savedQueries","saveCurrentQuery","queryIndex","q","newId","deleteQuery","queryId","formatSQL","formatted","updateSavedTitle","evt","savedQuery","newValue","computed","table","onMounted"],"mappings":"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"}