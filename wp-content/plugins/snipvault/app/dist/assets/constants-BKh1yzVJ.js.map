{"version":3,"file":"constants-BKh1yzVJ.js","sources":["../../src/components/app/snippet-editor/src/constants.js"],"sourcesContent":["import { ref } from \"vue\";\n\nexport const snippet = ref(null);\nexport const codeeditor = ref(null);\nexport const showAssistant = ref(false);\nexport const getErrorTypeColor = (errorType) => {\n  switch (errorType?.toUpperCase()) {\n    case \"FATAL\":\n      return \"bg-red-500/30 border-red-600 text-zinc-800 dark:text-zinc-100\"; // Critical errors - Red\n    case \"WARNING\":\n      return \"bg-amber-500/30 border-amber-600 text-zinc-800 dark:text-zinc-100\"; // Warnings - Amber/Orange\n    case \"NOTICE\":\n      return \"bg-blue-500/30 border-blue-600 text-zinc-800 dark:text-zinc-100\"; // Notices - Blue\n    case \"PARSE\":\n      return \"bg-purple-500/30 border-purple-600 text-zinc-800 dark:text-zinc-100\"; // Parse errors - Purple\n    case \"DEPRECATED\":\n      return \"bg-yellow-500/30 border-yellow-600 text-zinc-800 dark:text-zinc-100\"; // Deprecated features - Yellow\n    case \"UNKNOWN\":\n    default:\n      return \"bg-zinc-500/30 border-zinc-600 text-zinc-800 dark:text-zinc-100\"; // Unknown errors - Gray\n  }\n};\n\n// Convert Unix timestamp to local date/time with formatting options\nexport const formatTimestamp = (unixTimestamp, options = {}) => {\n  if (!unixTimestamp) return;\n  // Convert seconds to milliseconds if needed\n  const timestamp = unixTimestamp * (unixTimestamp.toString().length === 10 ? 1000 : 1);\n  const date = new Date(timestamp);\n\n  // Default formatting options\n  const defaultOptions = {\n    dateStyle: \"medium\",\n    timeStyle: \"medium\",\n  };\n\n  // Use Intl.DateTimeFormat for localized formatting\n  const formatter = new Intl.DateTimeFormat(\n    navigator.language, // Use browser's language setting\n    { ...defaultOptions, ...options }\n  );\n\n  return formatter.format(date);\n};\n\n// Different preset formats\nexport const timeFormatters = {\n  // Full date and time\n  full: (timestamp) =>\n    formatTimestamp(timestamp, {\n      dateStyle: \"full\",\n      timeStyle: \"long\",\n    }),\n\n  // Short date and time\n  short: (timestamp) =>\n    formatTimestamp(timestamp, {\n      dateStyle: \"short\",\n      timeStyle: \"short\",\n    }),\n\n  // Date only\n  dateOnly: (timestamp) =>\n    formatTimestamp(timestamp, {\n      dateStyle: \"medium\",\n    }),\n\n  // Time only\n  timeOnly: (timestamp) =>\n    formatTimestamp(timestamp, {\n      timeStyle: \"medium\",\n    }),\n};\n"],"names":["snippet","ref","codeeditor","showAssistant","getErrorTypeColor","errorType","formatTimestamp","unixTimestamp","options","timestamp","date","defaultOptions","timeFormatters"],"mappings":"6CAEY,MAACA,EAAUC,EAAI,IAAI,EAClBC,EAAaD,EAAI,IAAI,EACrBE,EAAgBF,EAAI,EAAK,EACzBG,EAAqBC,GAAc,CAC9C,OAAQA,GAAA,YAAAA,EAAW,cAAa,CAC9B,IAAK,QACH,MAAO,gEACT,IAAK,UACH,MAAO,oEACT,IAAK,SACH,MAAO,kEACT,IAAK,QACH,MAAO,sEACT,IAAK,aACH,MAAO,sEACT,IAAK,UACL,QACE,MAAO,iEACb,CACA,EAGaC,EAAkB,CAACC,EAAeC,EAAU,KAAO,CAC9D,GAAI,CAACD,EAAe,OAEpB,MAAME,EAAYF,GAAiBA,EAAc,SAAU,EAAC,SAAW,GAAK,IAAO,GAC7EG,EAAO,IAAI,KAAKD,CAAS,EAGzBE,EAAiB,CACrB,UAAW,SACX,UAAW,QACZ,EAQD,OALkB,IAAI,KAAK,eACzB,UAAU,SACV,CAAE,GAAGA,EAAgB,GAAGH,CAAO,CAChC,EAEgB,OAAOE,CAAI,CAC9B,EAGaE,EAAiB,CAE5B,KAAOH,GACLH,EAAgBG,EAAW,CACzB,UAAW,OACX,UAAW,MACjB,CAAK,EAGH,MAAQA,GACNH,EAAgBG,EAAW,CACzB,UAAW,QACX,UAAW,OACjB,CAAK,EAGH,SAAWA,GACTH,EAAgBG,EAAW,CACzB,UAAW,QACjB,CAAK,EAGH,SAAWA,GACTH,EAAgBG,EAAW,CACzB,UAAW,QACjB,CAAK,CACL"}